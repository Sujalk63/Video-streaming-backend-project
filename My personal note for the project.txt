this document has all the steps and notes taken from starting till the end of the project


----------------------------------video-6----------------------------------------

step 1  - we checked for node and then initialised new node npm by using the command "npm init", 
	- we also created new git repo and add the remote url, set the branch main and pushed the package.json(which was made by the npm init command)
	- handling files and folder, one of the necessary thing we would be dealing with images and storing them, ofc we gonna use 3rd party to store images may be aws or azure etc. but temporarily the image uploaded by the user is stored in our server only for if incase of connection lost form the user we have the image in our server then we would with the help of any third process move to these 3rd party application(aws, azure etc).
	- we create a folder an empty "public" inside that "public" folder we create "temp" but the problem with git is we cannot upload empty folders in git so inside the "temp" folder we create .gitkeep and empty file, just to upload empty folders.
	- in the main folder we also create git ignore file too, in the ,market we also have gitignore generators websites they just generate prject files according to our project. We also created using one generator we created for node and copied it and pasted it in the git ignore.(.gitignore generator). all the files that should be ignored are created by the generator website itself, we can add additionals too. basically these ignored are the files that can be re-created on git. Copy pasting from the generators website is a professional approach.
	- then we also create in the main folder .env file. these contain enc variables which are taken from the systems not the files. hitesh couldnt push the .env file so he created .env.sample so that we can use them.
	- then we create a src folder to keep the files of the application in an organised way, inside src we create files(app.js, constants.js, index.js ).
	- we configured our pakage.json firstly gave import export type as module we have two types in js module and common type we would use module type for the whole project.
	- we use nodemon for restarting the server after evry changes in the file. and a development dependency of nodemon not main dependency means it is used only during the development phase of the project but not in main dependency(which include both devlopment and production dependency) This might be the case if, for example, the application relies on Nodemon-specific features or functionalities, or if it's being used as a tool for managing processes in production, then we use main dependency. To instal dev dependency of nodemon we used the command "npm i -D nodemon", installing it created a node_module folder which contains all the dependencies for the project. We configure the scripts in the package.json we replaced the test with dev and gave the file path what this does is ask nodemon to reload the file that is index.js whenever i make changes. we run that script using "npm run dev" then the script would run 